use crate::frontend::{
    ast::{
        CompileUnit, GlobalDef, FuncDef, Block, BlockItem, Stmt, Decl, FuncParam, DataType, Ident, SrcLocation, 
        exp::{ Exp, ExpType, UnaryOp, BinaryOp, ArrayMethodType },
    },
    lexer::apply_string_escapes,
};

grammar;

// lexer
match {
    // skip spaces & comments
    r"\s*" => {},
    r"//.*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },
    _
}

pub CompileUnit: CompileUnit = <global_defs: (<GlobalDef>)*> => CompileUnit { <> };

GlobalDef: GlobalDef = {
    FuncDef,
    VariableDef,
}

FuncDef: GlobalDef = {
    "fn" <ident: Ident> "(" <param: FuncParam?> <mut params: ("," <FuncParam>)*> ")" <func_type: FuncType?> <block: Block> => {
        if param.is_some() {
            params.insert(0, param.unwrap());
        }
        GlobalDef::FuncDef(FuncDef { ident, params, block, func_type })
    }
}

VariableDef: GlobalDef = "let" <ident: Ident> ":" <data_type: DataType> "=" <init_value: Exp> ";" => GlobalDef::VariableDef { <> };

FuncParam: FuncParam = <ident: Ident> ":" <data_type: DataType> => FuncParam { <> };

FuncType: DataType = "->" <DataType> => <>;

DataType: DataType = {
    "int" => DataType::Int,
    "Array" "<" <element_type: DataType> ">" => DataType::Array { element_type: Box::new(<>) },
}

Ident: Ident = <begin: @L> <s: r"[_a-zA-Z][_a-zA-Z0-9]*"> <end: @R> => Ident { string: s.to_string(), src_loc: SrcLocation { begin, end } };

Block: Block = "{" <items: BlockItem*> "}" => Block(<>);

BlockItem: BlockItem = {
    Decl => BlockItem::Decl(<>),
    Stmt => BlockItem::Stmt(<>),
}

Decl: Decl = {
    "let" <ident: Ident> "=" <init_value: Exp> ";" => Decl{ <> }
}

Stmt: Stmt = {
    ReturnStmt,
    AssignStmt,
    OpAssignStmt,
    Block => Stmt::Block(<>),
    IfElseStmt,
    WhileStmt,
    InlineCommandStmt, 
    <begin: @L> "break" <end: @R> ";" => Stmt::Break { src_loc: SrcLocation { <> } },
    <begin: @L> "continue" <end: @R> ";" => Stmt::Continue { src_loc: SrcLocation { <> } },
    <Exp> ";" => Stmt::Exp(<>),
}

ReturnStmt: Stmt = {
    "return" <begin: @L> <return_value: Exp?> ";" <end: @R> => Stmt::Return { return_value, src_loc: SrcLocation { begin, end } }
}

AssignStmt: Stmt = {
    <lhs: Exp> "=" <new_value: Exp> ";" => Stmt::Assign { <> }
}

OpAssignStmt: Stmt = {
    <lhs: Exp> "+=" <begin: @L> <value: Exp> <end: @R> ";" => Stmt::Assign { lhs: lhs.clone(), new_value: Box::new(Exp { exp_type: ExpType::BinaryExp(BinaryOp::Add, lhs, value), src_loc: SrcLocation { begin, end } }) },
    <lhs: Exp> "-=" <begin: @L> <value: Exp> <end: @R> ";" => Stmt::Assign { lhs: lhs.clone(), new_value: Box::new(Exp { exp_type: ExpType::BinaryExp(BinaryOp::Sub, lhs, value), src_loc: SrcLocation { begin, end } }) },
    <lhs: Exp> "*=" <begin: @L> <value: Exp> <end: @R> ";" => Stmt::Assign { lhs: lhs.clone(), new_value: Box::new(Exp { exp_type: ExpType::BinaryExp(BinaryOp::Mul, lhs, value), src_loc: SrcLocation { begin, end } }) },
    <lhs: Exp> "/=" <begin: @L> <value: Exp> <end: @R> ";" => Stmt::Assign { lhs: lhs.clone(), new_value: Box::new(Exp { exp_type: ExpType::BinaryExp(BinaryOp::Div, lhs, value), src_loc: SrcLocation { begin, end } }) },
    <lhs: Exp> "%=" <begin: @L> <value: Exp> <end: @R> ";" => Stmt::Assign { lhs: lhs.clone(), new_value: Box::new(Exp { exp_type: ExpType::BinaryExp(BinaryOp::Mod, lhs, value), src_loc: SrcLocation { begin, end } }) },
}

IfElseStmt: Stmt = {
    "if" <exp: Exp> <if_branch: Block> => Stmt::IfElse { exp, if_branch: if_branch, else_branch: None },
    "if" <exp: Exp> <if_branch: Block> "else" <else_branch: Block> => Stmt::IfElse { exp, if_branch, else_branch: Some(else_branch)},
    "if" <exp: Exp> <if_branch: Block> "else" <else_branch: IfElseStmt> => Stmt::IfElse { exp, if_branch, else_branch: Some(Block(vec![BlockItem::Stmt(else_branch)])) },
}

WhileStmt: Stmt = {
    "while" <exp: Exp> <body: Block> => Stmt::While { <> }
}

InlineCommandStmt: Stmt = {
    "run_command!" "(" <fmt_str: StringLiteral> <arguments: ("," <Exp>)*> ")" ";" => {
        Stmt::InlineCommand { is_mod_command: false, <> }
    },
    "run_mod_command!" "(" <fmt_str: StringLiteral> <arguments: ("," <Exp>)*> ")" ";" => {
        Stmt::InlineCommand { is_mod_command: true, <> }
    },
}

StringLiteral: String = <l: r#""(\\\\|\\"|[^"\\])*""#> => apply_string_escapes(&l[1..l.len()-1]);

Number: i32 = IntConst;

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Exp: Box<Exp> = LOrExp;

PrimaryExp: Box<Exp> = {
    <begin: @L> <num: Number> <end: @R> => Box::new(Exp { exp_type: ExpType::Number(num), src_loc: SrcLocation { begin, end } }),
    Variable,
    FuncCall,
    NewArray,
    SquareBracketsArray, 
    ArrayElement,
    ArrayMethod, 
    "(" <Exp> ")",
}

Variable: Box<Exp> = {
    <begin: @L> <namespace: NamespacePrefix?> <ident: Ident> <end: @R> => Box::new(Exp { exp_type: ExpType::Variable { ident, namespace }, src_loc: SrcLocation { begin, end } }),
}

FuncCall: Box<Exp> = {
    <begin: @L> <namespace: NamespacePrefix?> <func_ident: Ident> "(" <arg: Exp?> <mut args: ("," <Exp>)*> ")" <end: @R> => {
        if arg.is_some() {
            args.insert(0, arg.unwrap());
        }
        Box::new(Exp { exp_type: ExpType::FuncCall { namespace, func_ident, arguments: args }, src_loc: SrcLocation { begin, end } })
    },
}

NamespacePrefix: Ident = <Ident> "::";

NewArray: Box<Exp> = {
    <begin: @L> "new" "Array" "(" <length: Exp> "," <element: Exp> ")" <end: @R> => Box::new(Exp { exp_type: ExpType::NewArray{ length, element }, src_loc: SrcLocation { begin, end } }),
    <begin: @L> "[" <element: Exp> ";" <length: Exp> "]" <end: @R> => Box::new(Exp { exp_type: ExpType::NewArray{ length, element }, src_loc: SrcLocation { begin ,end } }),
}

SquareBracketsArray: Box<Exp> = {
    <begin: @L> <element_type: ArrayTypePrefix?> "[" <element: Exp?> <mut elements: ("," <Exp>)*> "]" <end: @R> => {
        if element.is_some() {
            elements.insert(0, element.unwrap());
        }
        Box::new(Exp { exp_type: ExpType::SquareBracketsArray { elements, element_type }, src_loc: SrcLocation { begin, end } })
    }
}

ArrayTypePrefix: DataType = "Array" "<" <DataType> ">";

ArrayElement: Box<Exp> = {
    <begin: @L> <array: PrimaryExp>  <subscript: Subscript> <end: @R> => Box::new(Exp { exp_type: ExpType::ArrayElement{ array, subscript }, src_loc: SrcLocation { begin ,end } })
}

Subscript: Box<Exp> = {
    "[" <Exp> "]" => <>,
}

ArrayMethod: Box<Exp> = {
    <begin: @L> <array: PrimaryExp> "." "size" "("  ")" <end: @R> => Box::new(Exp { exp_type: ExpType::ArrayMethod{ array, method: ArrayMethodType::Size }, src_loc: SrcLocation { begin, end } }),
    <begin: @L> <array: PrimaryExp> "." "push" "(" <value: Exp> ")" <end: @R> => Box::new(Exp { exp_type: ExpType::ArrayMethod{ array, method: ArrayMethodType::Push{ value } }, src_loc: SrcLocation { begin, end } }),
    <begin: @L> <array: PrimaryExp> "." "pop" "("  ")" <end: @R> => Box::new(Exp { exp_type: ExpType::ArrayMethod{ array, method: ArrayMethodType::Pop }, src_loc: SrcLocation { begin, end } }),
    <begin: @L> <array: PrimaryExp> "." "insert" "(" <pos: Exp> "," <value: Exp> ")" <end: @R> => Box::new(Exp { exp_type: ExpType::ArrayMethod{ array, method: ArrayMethodType::Insert{ pos, value } }, src_loc: SrcLocation { begin, end } }),
    <begin: @L> <array: PrimaryExp> "." "erase" "(" <pos: Exp> ")" <end: @R> => Box::new(Exp { exp_type: ExpType::ArrayMethod{ array, method: ArrayMethodType::Erase{ pos } }, src_loc: SrcLocation { begin, end } }),
}

UnaryExp: Box<Exp> = {
    <begin: @L> <op: UnaryOp> <exp: UnaryExp> <end: @R> => {
        Box::new(Exp { exp_type: ExpType::UnaryExp(op, exp), src_loc: SrcLocation { begin, end } })
    },
    PrimaryExp,
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Positive,
    "-" => UnaryOp::Negative,
    "!" => UnaryOp::Not,
}

MulExp: Box<Exp> = {
    <begin: @L> <lhs: MulExp> <op: MulOp> <rhs: UnaryExp> <end: @R> => Box::new(Exp { exp_type: ExpType::BinaryExp(op, lhs, rhs), src_loc: SrcLocation { begin, end } }),
    UnaryExp,
}

MulOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod
}

AddExp: Box<Exp> = {
    <begin: @L> <lhs: AddExp> <op: AddOp> <rhs: MulExp> <end: @R> => Box::new(Exp { exp_type: ExpType::BinaryExp(op, lhs, rhs), src_loc: SrcLocation { begin, end } }),
    MulExp,
}

AddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
}

RelExp: Box<Exp> = {
    <begin: @L> <lhs: RelExp> <op: RelOp> <rhs: AddExp> <end: @R> => Box::new(Exp { exp_type: ExpType::BinaryExp(op, lhs, rhs), src_loc: SrcLocation { begin, end } }),
    AddExp,
}

RelOp: BinaryOp = {
    "<" => BinaryOp::Lt,
    ">" => BinaryOp::Gt,
    "<=" => BinaryOp::Le,
    ">=" => BinaryOp::Ge,
}

EqExp: Box<Exp> = {
    <begin: @L> <lhs: EqExp> <op: EqOp> <rhs: RelExp> <end: @R> => Box::new(Exp { exp_type: ExpType::BinaryExp(op, lhs, rhs), src_loc: SrcLocation { begin, end } }),
    RelExp,
}

EqOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Ne,
}

LAndExp: Box<Exp> = {
    <begin: @L> <lhs: LAndExp> "&&" <rhs: EqExp> <end: @R> => Box::new(Exp { exp_type: ExpType::BinaryExp(BinaryOp::LAnd, lhs, rhs), src_loc: SrcLocation { begin, end } }),
    EqExp,
}

LOrExp: Box<Exp> = {
    <begin: @L> <lhs: LOrExp> "||" <rhs: LAndExp> <end: @R> => Box::new(Exp { exp_type: ExpType::BinaryExp(BinaryOp::LOr, lhs, rhs), src_loc: SrcLocation { begin, end } }),
    LAndExp,
}