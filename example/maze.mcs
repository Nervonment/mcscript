// 在运行此代码之前, 请将游戏规则 maxCommandChainLength 增大,
// 经测试, 1000000 是可行的值. 
// 运行以下的命令来应用此游戏规则: 
// /gamerule maxCommandChainLength 1000000
// 完成后, 请按照以下的顺序运行命令:
// /function mcscript:init
// /function maze:init
// /function maze:main

// Before running this code, please increase the maxCommandChainLength game rule.
// After testing, 1000000 is a feasible value.
// Run the following command to apply this game rule:
// /gamerule maxCommandChainLength 1000000
// Once completed, please run the commands in the following order:
// /function mcscript:init
// /function maze:init
// /function maze:main

let HEIGHT: int = 45;
let WIDTH: int = 45;

let DOWN: int = 1;
let UP: int = 2;
let LEFT: int = 3;
let RIGHT: int = 4;

let AIR: int = 0;
let WALL: int = 1;

let maze: Array<Array<int>> = [[WALL; WIDTH]; HEIGHT];

let x: int = 1;
let y: int = 1;
let blocks: Array<Array<int>> = Array<Array<int>>[];

fn main() {
    maze[1][1] = AIR;
    find();
    while blocks.size() {
        let random_num = rand() % blocks.size(); 
        let block = blocks[random_num];
        x = block[0];
        y = block[1];
        let dir = block[2];
        if dir == DOWN {
            x += 1;
        } else if dir == RIGHT {
            y += 1;
        } else if dir == LEFT {
            y -= 1;
        } else if dir == UP {
            x -= 1;
        }
        if maze[x][y] == WALL {
            maze[x][y] = AIR;
            maze[block[0]][block[1]] = AIR;
            find();
        }
        blocks.erase(random_num);
    }

    let x = 0;
    while x < WIDTH {
        let z = 0;
        while z < HEIGHT {
            if maze[x][z] == WALL {
                run_command!("fill ~{} ~ ~{} ~{} ~1 ~{} white_concrete", x + 2, z + 2, x + 2, z + 2);
            }
            run_command!("setblock ~{} ~-1 ~{} white_concrete", x + 2, z + 2);
            z += 1;
        }
        x += 1;
    }
}

fn rand() -> int {
    run_command!("execute store result storage memory:temp return_value int 1.0 run random value 0..2147483646");
}

fn find() {
    if x + 1 < WIDTH - 1 && maze[x + 1][y] == WALL {
        blocks.push([x + 1, y, DOWN]);
    }
    if y + 1 < HEIGHT - 1 && maze[x][y + 1] == WALL {
        blocks.push([x, y + 1, RIGHT]);
    }
    if x - 1 > 0 && maze[x - 1][y] == WALL {
        blocks.push([x - 1, y, UP]);
    }
    if y - 1 > 0 && maze[x][y - 1] == WALL {
        blocks.push([x, y - 1, LEFT]);
    } 
}
