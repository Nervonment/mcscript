fn fib_recursive(n: int) -> int {
    if n < 3 {
        return 1;
    }
    return fib_recursive(n - 1) + fib_recursive(n - 2);
}

fn fib(n: int) -> int {
    let res = new Array(n + 1, 1);
    let i = 3;
    while i <= n {
        res[i] = res[i - 1] + res[i - 2];
        i += 1;
    }
    return res[n];
}

fn f1(p: int) -> int {
    p -= 1;
    return p;
}

fn f2(arr: Array<int>) -> Array<int> {
    arr[0] = 2;
    arr[1] = 3;
    return arr;
}

fn f3(a: int, b: int) -> int {
    let c = a + b;
    while c < 75 {
        let d = 42;
        if c < 100 {
            c += d;
            if c > 99 {
                let e = d * 2;
                if 1 == 1 {
                    c = e * 2;
                }
            }
        }
    }
    return c;
}