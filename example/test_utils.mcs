let g_a: int = 1;
let g_b: int = fib(10) + fib(9);
let g_arr_1: Array<int> = new Array(10, 1);
let g_c: int = g_arr_1[0];
let g_d: int = 1919810;
let g_arr_2: Array<Array<int>> = new Array(2, new Array(2, 0));
let g_sum_1: int = 0;

fn fib_recursive(n: int) -> int {
    if n < 3 {
        return 1;
    }
    return fib_recursive(n - 1) + fib_recursive(n - 2);
}

fn fib(n: int) -> int {
    let res = new Array(n + 1, 1);
    let i = 3;
    while i <= n {
        res[i] = res[i - 1] + res[i - 2];
        i += 1;
    }
    return res[n];
}

fn f1(p: int) -> int {
    p -= 1;
    return p;
}

fn f2(arr: Array<int>) -> Array<int> {
    arr[0] = 2;
    arr[1] = 3;
    return arr;
}

fn f3(a: int, b: int) -> int {
    let c = a + b;
    while c < 75 {
        let d = 42;
        if c < 100 {
            c += d;
            if c > 99 {
                let e = d * 2;
                if 1 == 1 {
                    c = e * 2;
                }
            }
        }
    }
    return c;
}

fn f4() -> int {
    return g_d;
}

fn f5(arr: Array<int>) -> Array<int> {
    return arr;
}

fn f6(arr: Array<Array<int>>) -> Array<Array<int>> {
    return arr;
}

fn f7() {
    g_sum_1 += 1;
}

let f8_a: int = 7;
fn f8() -> int {
    let b = f8_a;
    let f8_a = 1;
    if f8_a == b {
        f8_a += 1;
        return 1;
    } else {
        return 0;
    }
}