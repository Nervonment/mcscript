let g_a: int = 1;
let g_b: int = fib(10) + fib(9);
let g_arr_1: Array<int> = new Array(10, 1);
let g_c: int = g_arr_1[0];
let g_d: int = 1919810;
let g_arr_2: Array<Array<int>> = new Array(2, new Array(2, 0));
let g_sum_1: int = 0;

fn fib_recursive(n: int) -> int {
    if n < 3 {
        return 1;
    }
    return fib_recursive(n - 1) + fib_recursive(n - 2);
}

fn fib(n: int) -> int {
    let res = new Array(n + 1, 1);
    let i = 3;
    while i <= n {
        res[i] = res[i - 1] + res[i - 2];
        i += 1;
    }
    return res[n];
}

fn f1(p: int) -> int {
    p -= 1;
    return p;
}

fn f2(arr: Array<int>) -> Array<int> {
    arr[0] = 2;
    arr[1] = 3;
    return arr;
}

fn f3(a: int, b: int) -> int {
    let c = a + b;
    while c < 75 {
        let d = 42;
        if c < 100 {
            c += d;
            if c > 99 {
                let e = d * 2;
                if 1 == 1 {
                    c = e * 2;
                }
            }
        }
    }
    return c;
}

fn f4() -> int {
    return g_d;
}

fn f5(arr: Array<int>) -> Array<int> {
    return arr;
}

fn f6(arr: Array<Array<int>>) -> Array<Array<int>> {
    return arr;
}

fn f7() {
    g_sum_1 += 1;
}

let f8_a: int = 7;
fn f8() -> int {
    let b = f8_a;
    let f8_a = 1;
    if f8_a == b {
        f8_a += 1;
        return 1;
    } else {
        return 0;
    }
}

let arr: Array<int> = [0];

fn init_array() {
    arr = [637, 846, 749, 720, 99, 397, 274, 561, 153, 597, 503, 992, 717, 243, 389, 467, 608, 687, 658, 994];
}

fn bubble_sort() {
    let n = arr.size();
    let i = 0;
    while i < n - 1 {
        let j = 0;
        while j < n - i - 1 {
            if arr[j] > arr[j + 1] {
                let tmp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = tmp;
            }
            j += 1;
        }
        i += 1;
    }
}

fn insert_sort() {
    let n = arr.size();
    let i = 1;
    while i < n {
        let tmp = arr[i];
        let j = i - 1;
        while j > -1 && tmp < arr[j] {
            arr[j + 1] = arr[j];
            j -= 1;
        }
        arr[j + 1] = tmp;
        i += 1;
    }
}

fn quick_sort() {
    quick_sort_impl(0, arr.size() - 1);
}

fn quick_sort_impl(begin: int, end: int) {
    if begin >= end {
        return;
    }
    let i = begin;
    let j = end;
    let tmp = arr[begin];
    while i < j {
        while i < j && arr[j] > tmp - 1 {
            j -= 1;
        }
        if i < j {
            arr[i] = arr[j];
            i += 1;
        }
        while i < j && arr[i] < tmp {
            i += 1;
        }
        if i < j {
            arr[j] = arr[i];
            j -= 1;
        }
    }
    arr[i] = tmp;
    quick_sort_impl(begin, i - 1);
    quick_sort_impl(i + 1, end);
}

fn select_sort() {
    let n = arr.size();
    let i = 0;
    while i < n - 1 {
        let min = i;
        let j = i + 1;
        while j < n {
            if arr[min] > arr[j] {
                min = j;
            }
            j += 1;
        }
        let tmp = arr[min];
        arr[min] = arr[i];
        arr[i] = tmp;
        i += 1;
    }
}

fn make_heap(begin: int, end: int) {
    let p = begin;
    let c = p * 2 + 1;
    while c < end + 1 {
        if c < end && arr[c] < arr[c + 1] {
            c += 1;
        }
        if arr[p] > arr[c] {
            return;
        } else {
            let tmp = arr[p];
            arr[p] = arr[c];
            arr[c] = tmp;
            p = c;
            c = p * 2 + 1;
        }
    }
}

fn heap_sort() {
    let n = arr.size();
    let i = n / 2 - 1;
    while i > -1 {
        make_heap(i, n - 1);
        i -= 1;
    }
    i = n - 1;
    while i > 0 {
        let tmp = arr[0];
        arr[0] = arr[i];
        arr[i] = tmp;
        make_heap(0, i - 1);
        i -= 1;
    }
}

// assuming all the numbers in `arr` are in range [0, 1000)
fn counting_sort() {
    let n = arr.size();
    let cnt_arr = [0; 1000];
    let sorted_arr = [0; n];
    let i = 0;
    while i < n {
        cnt_arr[arr[i]] += 1;
        i += 1;
    }
    let k = 1;
    while k < 1000 {
        cnt_arr[k] += cnt_arr[k - 1];
        k += 1;
    }
    let j = n;
    while j > 0 {
        cnt_arr[arr[j - 1]] -= 1;
        sorted_arr[cnt_arr[arr[j - 1]]] = arr[j - 1];
        j -= 1;
    }
    arr = sorted_arr;
}

fn merge_sort() {
    merge_sort_impl(0, arr.size());
}

fn merge_sort_impl(l: int, r: int) {
    if l > r {
        return;
    }

    let mid = (l + r) / 2;
    merge_sort_impl(l, mid);
    merge_sort_impl(mid, r);

    let i = l;
    let j = mid;
    let k = l;
    let tmp_arr = arr;
    while i < mid && j < r {
        if arr[i] < arr[j] {
            tmp_arr[k] = arr[i];
            i += 1;
        } else {
            tmp_arr[k] = arr[j];
            j += 1;
        }
        k += 1;
    }
    while i < mid {
        tmp_arr[k] = arr[i];
        i += 1;
        k += 1;
    }
    while j < r {
        tmp_arr[k] = arr[j];
        j += 1;
        k += 1;
    }
    arr = tmp_arr;
}
